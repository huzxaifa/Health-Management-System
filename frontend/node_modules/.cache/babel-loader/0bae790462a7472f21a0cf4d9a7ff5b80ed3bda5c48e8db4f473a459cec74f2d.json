{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\huzai\\\\Downloads\\\\HealthHub-main\\\\HealthHub\\\\frontend\\\\src\\\\components\\\\profiles\\\\Client\\\\Appointments.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport DoctorList from './DoctorList';\nimport ClientBookAppointment from './ClientBookAppointment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Appointments = ({\n  userId\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [doctors, setDoctors] = useState([]);\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\n  const [doctorAvailableDates, setDoctorAvailableDates] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(null);\n  useEffect(() => {\n    const fetchDoctors = async () => {\n      try {\n        const response = await axios.get('http://localhost:3000/api/doctors_list');\n        setDoctors(response.data);\n      } catch (error) {\n        console.error('Error fetching doctors:', error);\n      }\n    };\n    fetchDoctors();\n  }, []);\n  const fetchAvailableDates = async doctorId => {\n    try {\n      console.log('Fetching available dates for Doctor:', doctorId);\n      const response = await axios.get(`http://localhost:3000/doctor/${doctorId}/available_dates`);\n      console.log('Available dates:', response.data);\n      setDoctorAvailableDates(response.data);\n    } catch (error) {\n      console.error('Error fetching available dates:', error);\n    }\n  };\n  useEffect(() => {\n    console.log('Doctor available dates:', doctorAvailableDates);\n    console.log('Client ID:', userId);\n  }, [doctorAvailableDates]);\n  const handleBookAppointment = doctor => {\n    console.log('Book appointment for doctor:', doctor);\n    console.log('Doctor ID:', doctor.user._id);\n    setSelectedDoctor(doctor);\n    if (doctor && doctor.user._id) {\n      fetchAvailableDates(doctor.user._id);\n      console.log('Available dates in book:', doctorAvailableDates);\n    }\n  };\n  const handleCancelAppointment = () => {\n    setSelectedDoctor(null);\n    setSelectedDate(null);\n  };\n  // Function to check availability of time slots for a specific date and doctor\n  const checkAvailability = async (doctorId, date) => {\n    try {\n      const response = await axios.get('http://localhost:3000/api/check_availability', {\n        params: {\n          doctorId,\n          date\n        }\n      });\n      return response.data.availableSlots;\n    } catch (error) {\n      console.error('Error checking availability:', error);\n      return [];\n    }\n  };\n  const handleBookAppointmentForDoctor = async clientInfo => {\n    try {\n      console.log(`Book appointment for Doctor: ${selectedDoctor.name} Id: ${selectedDoctor.user._id}, Date: ${selectedDate}, Client: ${clientInfo.name}`);\n\n      // Check availability of time slots\n      const availableSlots = await checkAvailability(selectedDoctor.user._id, selectedDate);\n\n      // Find an available time slot to book the appointment\n      if (availableSlots.length > 0) {\n        const timeSlotId = availableSlots[0]._id; // Assuming you want to book the first available slot\n\n        // Make API call to book appointment\n        console.log('request parameters to book appointment:', selectedDoctor.user._id, clientInfo.client_id, selectedDate, timeSlotId);\n        const response = await axios.post('http://localhost:3000/api/book_appointment', {\n          doctorId: selectedDoctor.user._id,\n          patientId: clientInfo.client_id,\n          // Assuming clientInfo contains patient ID\n          date: selectedDate,\n          timeSlotId\n        });\n        console.log('Appointment booked successfully:', response.data);\n\n        // Clear the selected doctor\n        setSelectedDoctor(null);\n      } else {\n        console.log('No available time slots for booking.');\n      }\n    } catch (error) {\n      console.error('Error booking appointment:', error);\n      // Handle error\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"appointments\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Appointments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), selectedDoctor && /*#__PURE__*/_jsxDEV(ClientBookAppointment, {\n      doctor: selectedDoctor,\n      availableDates: doctorAvailableDates,\n      userId: userId,\n      onBookAppointment: handleBookAppointmentForDoctor,\n      onCancel: handleCancelAppointment,\n      onDateSelect: setSelectedDate // Pass a function to set selectedDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DoctorList, {\n      doctors: doctors,\n      handleBookAppointment: handleBookAppointment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n_s(Appointments, \"i2ubEkNaCQ3cSGTKv1BLgPUEyN0=\", false, function () {\n  return [useNavigate];\n});\n_c = Appointments;\nexport default Appointments;\nvar _c;\n$RefreshReg$(_c, \"Appointments\");","map":{"version":3,"names":["React","useState","useEffect","axios","useNavigate","DoctorList","ClientBookAppointment","jsxDEV","_jsxDEV","Appointments","userId","_s","navigate","doctors","setDoctors","selectedDoctor","setSelectedDoctor","doctorAvailableDates","setDoctorAvailableDates","selectedDate","setSelectedDate","fetchDoctors","response","get","data","error","console","fetchAvailableDates","doctorId","log","handleBookAppointment","doctor","user","_id","handleCancelAppointment","checkAvailability","date","params","availableSlots","handleBookAppointmentForDoctor","clientInfo","name","length","timeSlotId","client_id","post","patientId","className","children","fileName","_jsxFileName","lineNumber","columnNumber","availableDates","onBookAppointment","onCancel","onDateSelect","_c","$RefreshReg$"],"sources":["C:/Users/huzai/Downloads/HealthHub-main/HealthHub/frontend/src/components/profiles/Client/Appointments.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport DoctorList from './DoctorList';\r\nimport ClientBookAppointment from './ClientBookAppointment';\r\n\r\nconst Appointments = ({ userId }) => {\r\n  const navigate = useNavigate();\r\n  const [doctors, setDoctors] = useState([]);\r\n  const [selectedDoctor, setSelectedDoctor] = useState(null);\r\n  const [doctorAvailableDates, setDoctorAvailableDates] = useState([]);\r\n  const [selectedDate, setSelectedDate] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchDoctors = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:3000/api/doctors_list');\r\n        setDoctors(response.data);\r\n      } catch (error) {\r\n        console.error('Error fetching doctors:', error);\r\n      }\r\n    };\r\n    fetchDoctors();\r\n  }, []);\r\n\r\n  const fetchAvailableDates = async (doctorId) => {\r\n    try {\r\n      console.log('Fetching available dates for Doctor:', doctorId);\r\n      const response = await axios.get(`http://localhost:3000/doctor/${doctorId}/available_dates`);\r\n      console.log('Available dates:', response.data);\r\n      setDoctorAvailableDates(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching available dates:', error);\r\n    }\r\n  };\r\n  \r\n  useEffect(() => {\r\n    console.log('Doctor available dates:', doctorAvailableDates);\r\n    console.log('Client ID:', userId);\r\n  }, [doctorAvailableDates]);\r\n  \r\n\r\n  const handleBookAppointment = (doctor) => {\r\n    console.log('Book appointment for doctor:', doctor);\r\n    console.log('Doctor ID:', doctor.user._id);\r\n    setSelectedDoctor(doctor);\r\n    if (doctor && doctor.user._id) {\r\n      fetchAvailableDates(doctor.user._id);\r\n      console.log('Available dates in book:', doctorAvailableDates);\r\n    }\r\n  };\r\n  \r\n\r\n  const handleCancelAppointment = () => {\r\n    setSelectedDoctor(null);\r\n    setSelectedDate(null);\r\n  };\r\n  // Function to check availability of time slots for a specific date and doctor\r\n  const checkAvailability = async (doctorId, date) => {\r\n    try {\r\n      const response = await axios.get('http://localhost:3000/api/check_availability', {\r\n        params: { doctorId, date }\r\n      });\r\n      return response.data.availableSlots;\r\n    } catch (error) {\r\n      console.error('Error checking availability:', error);\r\n      return [];\r\n    }\r\n  };\r\n  const handleBookAppointmentForDoctor = async (clientInfo) => {\r\n    try {\r\n      console.log(`Book appointment for Doctor: ${selectedDoctor.name} Id: ${selectedDoctor.user._id}, Date: ${selectedDate}, Client: ${clientInfo.name}`);\r\n      \r\n      // Check availability of time slots\r\n      const availableSlots = await checkAvailability(selectedDoctor.user._id, selectedDate);\r\n      \r\n      // Find an available time slot to book the appointment\r\n      if (availableSlots.length > 0) {\r\n        const timeSlotId = availableSlots[0]._id; // Assuming you want to book the first available slot\r\n  \r\n        // Make API call to book appointment\r\n        console.log('request parameters to book appointment:', selectedDoctor.user._id, clientInfo.client_id, selectedDate, timeSlotId)\r\n        const response = await axios.post('http://localhost:3000/api/book_appointment', {\r\n          doctorId: selectedDoctor.user._id,\r\n          patientId: clientInfo.client_id, // Assuming clientInfo contains patient ID\r\n          date: selectedDate,\r\n          timeSlotId\r\n        });\r\n  \r\n        console.log('Appointment booked successfully:', response.data);\r\n  \r\n        // Clear the selected doctor\r\n        setSelectedDoctor(null);\r\n      } else {\r\n        console.log('No available time slots for booking.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error booking appointment:', error);\r\n      // Handle error\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"appointments\">\r\n      <h2>Appointments</h2>\r\n      {selectedDoctor && (\r\n        <ClientBookAppointment\r\n          doctor={selectedDoctor}\r\n          availableDates={doctorAvailableDates}\r\n          userId={userId}\r\n          onBookAppointment={handleBookAppointmentForDoctor}\r\n          onCancel={handleCancelAppointment}\r\n          onDateSelect={setSelectedDate} // Pass a function to set selectedDate\r\n        />\r\n      )}\r\n      <DoctorList doctors={doctors} handleBookAppointment={handleBookAppointment} />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Appointments;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}